{
  "version": 3,
  "sources": ["../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isInteger = require( '@stdlib/assert-is-integer' ).isPrimitive;\nvar isCollection = require( '@stdlib/assert-is-collection' );\nvar isOrder = require( '@stdlib/ndarray-base-assert-is-order' );\nvar shape2strides = require( '@stdlib/ndarray-base-shape2strides' );\nvar format = require( '@stdlib/string-format' );\n\n\n// MAIN //\n\n/**\n* Returns the strides of a provided ndarray.\n*\n* @param {ndarrayLike} x - input ndarray\n* @throws {TypeError} must provide an ndarray\n* @returns {IntegerArray} strides\n*\n* @example\n* var zeros = require( '@stdlib/ndarray-zeros' );\n*\n* var out = strides( zeros( [ 3, 3, 3 ] ) );\n* // returns [ 9, 3, 1 ]\n*/\nfunction strides( x ) {\n\tvar out;\n\tvar ord;\n\tvar sh;\n\tvar st;\n\tvar d;\n\tvar i;\n\n\t// Note: we intentionally avoid rigorous ndarray checks to minimize performance impacts. This obviously means that non-ndarray-like objects can sneak through, but this is likely all right for the purposes of this function...\n\tif ( typeof x !== 'object' || x === null ) {\n\t\tthrow new TypeError( format( 'invalid argument. Must provide an ndarray. Value: `%s`.', x ) );\n\t}\n\tst = x.strides; // TODO: consider whether we want to support ecosystem libraries, such as scijs/ndarray, which name this property `stride`\n\tif ( !isCollection( st ) ) {\n\t\t// WARNING: if no strides array, try to derive the strides from the shape. Note, however, that there is a lot that can go wrong here, as the only thing we are requiring is that the shape is a collection. The main point of going through the effort to compute strides is to support minimal ndarray-esque objects, where the only essential attributes are `shape` and `dtype` and where other attributes can be computed (e.g., `strides`, `offset`, `ndims`, `order`, etc), assuming single-segment contiguous data stored in row-major order...\n\t\tsh = x.shape;\n\t\tif ( !isCollection( sh ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Must provide an ndarray. Value: `%s`.', x ) );\n\t\t}\n\t\tif ( sh.length === 0 ) {\n\t\t\treturn [ 0 ];\n\t\t}\n\t\tord = x.order;\n\t\tif ( !isOrder( ord ) ) {\n\t\t\tord = 'row-major';\n\t\t}\n\t\treturn shape2strides( sh, ord );\n\t}\n\t// Copy the strides in order to avoid unintended mutation...\n\tout = [];\n\tfor ( i = 0; i < st.length; i++ ) {\n\t\td = st[ i ];\n\t\tif ( !isInteger( d ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Must provide an ndarray. Value: `%s`.', x ) );\n\t\t}\n\t\tout.push( d );\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = strides;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Return the strides of a provided ndarray.\n*\n* @module @stdlib/ndarray-strides\n*\n* @example\n* var zeros = require( '@stdlib/ndarray-zeros' );\n* var strides = require( '@stdlib/ndarray-strides' );\n*\n* var sh = strides( zeros( [ 3, 3, 3 ] ) );\n* // returns [ 9, 3, 1 ]\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAY,QAAS,2BAA4B,EAAE,YACnDC,EAAe,QAAS,8BAA+B,EACvDC,EAAU,QAAS,sCAAuC,EAC1DC,EAAgB,QAAS,oCAAqC,EAC9DC,EAAS,QAAS,uBAAwB,EAkB9C,SAASC,EAASC,EAAI,CACrB,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EAGJ,GAAK,OAAON,GAAM,UAAYA,IAAM,KACnC,MAAM,IAAI,UAAWF,EAAQ,0DAA2DE,CAAE,CAAE,EAG7F,GADAI,EAAKJ,EAAE,QACF,CAACL,EAAcS,CAAG,EAAI,CAG1B,GADAD,EAAKH,EAAE,MACF,CAACL,EAAcQ,CAAG,EACtB,MAAM,IAAI,UAAWL,EAAQ,0DAA2DE,CAAE,CAAE,EAE7F,OAAKG,EAAG,SAAW,EACX,CAAE,CAAE,GAEZD,EAAMF,EAAE,MACFJ,EAASM,CAAI,IAClBA,EAAM,aAEAL,EAAeM,EAAID,CAAI,EAC/B,CAGA,IADAD,EAAM,CAAC,EACDK,EAAI,EAAGA,EAAIF,EAAG,OAAQE,IAAM,CAEjC,GADAD,EAAID,EAAIE,CAAE,EACL,CAACZ,EAAWW,CAAE,EAClB,MAAM,IAAI,UAAWP,EAAQ,0DAA2DE,CAAE,CAAE,EAE7FC,EAAI,KAAMI,CAAE,CACb,CACA,OAAOJ,CACR,CAKAR,EAAO,QAAUM,ICpDjB,IAAIQ,EAAO,IAKX,OAAO,QAAUA",
  "names": ["require_main", "__commonJSMin", "exports", "module", "isInteger", "isCollection", "isOrder", "shape2strides", "format", "strides", "x", "out", "ord", "sh", "st", "d", "i", "main"]
}
